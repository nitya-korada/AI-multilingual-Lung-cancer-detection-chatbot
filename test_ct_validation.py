# -*- coding: utf-8 -*-
"""test_ct_validation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yhB_4Be6t4GIG_7X7R21i221P7vt0flw
"""

import streamlit as st
import torch
import numpy as np
import cv2
from PIL import Image
from torchvision.models.video import r3d_18
import torch.nn as nn
from medmnist import INFO

# Load MedMNIST model
@st.cache_resource
def load_medmnist_model():
    info = INFO['organmnist3d']
    num_classes = len(info['label'])
    labels = info['label']

    model = r3d_18(pretrained=False)
    model.stem[0] = nn.Conv3d(1, 64, kernel_size=(7,7,7), stride=(1,2,2), padding=(3,3,3), bias=False)
    model.fc = nn.Linear(model.fc.in_features, num_classes)
    model.load_state_dict(torch.load("organmnist3d_best_r3d18.pth", map_location="cpu"))
    model.eval()
    return model, labels

medmnist_model, medmnist_labels = load_medmnist_model()

# Final CT validation function (FULL DEBUG VERSION)
def final_ct_validation(image):
    try:
        grayscale = image.convert("L")
        img_array = np.array(grayscale)
        height, width = img_array.shape

        # Heuristic checks
        if height < 150 or width < 150:
            return "‚ùå Image too small to be a CT scan"
        if width > height * 1.8:
            return "‚ùå Image appears to be landscape or diagram"

        mean_pixel = np.mean(img_array)
        std_pixel = np.std(img_array)
        if mean_pixel > 245 or std_pixel < 5:
            return "‚ùå Image lacks contrast ‚Äî likely not a CT scan"

        edges = cv2.Canny(img_array, 50, 150)
        edge_density = np.sum(edges > 0) / edges.size
        if edge_density > 0.2:
            return "‚ùå Too many sharp edges ‚Äî likely not a CT scan"

        # Prepare volume
        resized_img = cv2.resize(img_array, (224, 224)).astype(np.float32) / 255.0
        volume = np.stack([resized_img] * 16, axis=0)
        tensor = torch.tensor(volume).unsqueeze(0).unsqueeze(0)  # [1, 1, 16, 224, 224]

        with torch.no_grad():
            output = medmnist_model(tensor)
            pred = torch.argmax(output, dim=1).item()
            label_keys = list(medmnist_labels.keys())
            label = medmnist_labels[label_keys[pred]]

        st.write("‚úÖ Predicted label:", label)

        if "lung" not in label.lower():
            return f"‚ùå This appears to be a CT of {label}, not lungs"
        return "Valid lung CT scan"

    except Exception as e:
        return f"‚ùå Validation error: {e}"

# Streamlit UI
st.title("üß™ Test CT Validation")

uploaded_file = st.file_uploader("Upload a CT scan image", type=["jpg", "jpeg", "png"])
if uploaded_file:
    img = Image.open(uploaded_file).convert("RGB")
    st.image(img, caption="Uploaded Image", use_container_width=True)
    result = final_ct_validation(img)
    st.markdown(f"### üîç Result: {result}")